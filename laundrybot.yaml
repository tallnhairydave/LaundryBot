substitutions:
  esphome_name: laundrybot

# I'm using a Wemos D1 Mini, you will need to edit this if you're not.
esphome:
  name: ${esphome_name}
  platform: ESP8266
  board: d1_mini

# Update these for your setup
wifi:
  ssid: "YOUR_SSID_HERE"
  password: "YOUR WIFI PASSWORD HERE"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Laundrybot Fallback Hotspot"
    password: "YOUR FALLBACK HOTSPOT PASSWORD HERE"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API - update these for your setup.
api:
  password: "YOUR API PASSWORD HERE"

ota:
  password: "YOUR OTA PASSWORD HERE"

# Get the current time from HA
time:
  - platform: homeassistant
    id: esptime

# the OLED display I'm using is I2C
i2c:
  sda: D2
  scl: D1

# font files need to be in "esphome/fonts" on your HA instance
# the esphome folder should be under "config" folder where your
# configuration.yaml lives. At least if you're running the HA 
# operating system on a Pi like I am....
font:
  - file: "fonts/arial.ttf"
    id: font1
    size: 10
  - file: "fonts/BebasNeue-Regular.ttf"
    id: font2
    size: 46
  - file: "fonts/arial.ttf"
    id: font3
    size: 8
  - file: "fonts/arial.ttf"
    id: font4
    size: 14
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 55
    glyphs:
      - "\U000F072A" # mdi-washing-machine
      - "\U000F06A9" # mdi-robot

# setup the display and it's pages. Page 4 is blank so we can turn off the display to avoid burn in on the mini OLED.
display:
  - platform: ssd1306_i2c
    model: SH1106 128x64
    id: my_display
    pages:
      - id: page1
        lambda: |-
          // Displays a cute logo "LaundryBot" and a cute logo.
          it.print(64, 37, id(icon_font), TextAlign::CENTER, "\U000F072A\U000F06A9");
      - id: page2 
        lambda: |-
          // clock
          it.strftime(0, 52, id(font2), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());
          // kitchen temperature
          it.printf(122, 30, id(font3), TextAlign::TOP_RIGHT, "TEMP:");
          if (id(kitchen_temperature).has_state()) {
            it.printf(122, 52, id(font4), TextAlign::BASELINE_RIGHT , "%.1fÂ°", id(kitchen_temperature).state);
          } else {
            it.printf(122, 52, id(font4), TextAlign::BASELINE_RIGHT , "None");
          }
      - id: page3 
        lambda: |-
           it.print(10, 10, id(font1), "Washer Status:");
           it.line(0, 24, 128, 24);
           it.printf(10, 28, id(font1), TextAlign::TOP_LEFT, "%.2f A", id(washing_machine_amps).state);     
           it.printf(10, 38, id(font1), TextAlign::TOP_LEFT, "%.2f W", id(washing_machine_watts).state);     
           it.printf(10, 48, id(font1), TextAlign::TOP_LEFT, "Status: %s", id(washing_machine_status).state.c_str());   
      - id: page4
        lambda: |-
          // blank page for "screen off"
          it.print(0, 10, id(font1), "");

# swap pages every 10 seconds
interval:
  - interval: 10s
    then:
      if:
        condition:
          lambda: return !id(laundrybot_display_dnd).state;
        then:
          - display.page.show: !lambda |-
              static int pagenum = 0;
              static display::DisplayPage* pages[] = {id(page1), id(page2), id(page3)};
              auto page = pages[pagenum++];
              if (pagenum >= 3)
                pagenum = 0;
              return page;
          - component.update: my_display    

switch:
  - platform: restart
    name: ${esphome_name}_restart
    id: restart_switch

  - platform: shutdown
    name: "${esphome_name} Shutdown"

  - platform: template
    # This is inverted, so "on" turns "off" the display. Hence the fake Template Switch in 
    # configuration.yaml which turns this "on" when that switch is set to off.
    name: "LaundryBot Screen"
    id: ${esphome_name}_display_dnd
    optimistic: True
    on_turn_on:
      - display.page.show: page4
      - component.update: my_display
    on_turn_off:
      - display.page.show: page1
      - component.update: my_display

binary_sensor:
  - platform: status
    name: "${esphome_name} Status"

sensor:
  - platform: uptime
    name: "${esphome_name} Uptime Sensor"

  - platform: wifi_signal
    name: "${esphome_name} WiFi Signal"
    update_interval: 60s

  - platform: homeassistant
    id: kitchen_temperature
    entity_id: sensor.kitchen_temperature
    internal: true

  - platform: adc
    pin: A0
    id: adc_sensor

  - platform: ct_clamp
    sensor: adc_sensor
    name: "Washing Machine current"
    id: washing_machine_amps
    update_interval: 10s
    filters:
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0 -> 0
          # Known load: 1500W = 6.25A
          # Value shown in logs: 0.06333
          - 0.06333 -> 6.25

  - platform: template
    name: "Washing Machine power"
    id: washing_machine_watts
    icon: mdi:power-socket-uk
    lambda: |-
      if (id(washing_machine_amps).has_state()) {
        return (240 * id(washing_machine_amps).state);
      } else {
        return(0);
      }
    update_interval: 10s
    unit_of_measurement: "W"

text_sensor:    
  - platform: wifi_info
    ip_address:
      name: "Laundrybot IP address"
      internal: true
      id: ip_addr

  - platform: template    
    name: "Washing Machine Status"
    id: washing_machine_status
    # DUE TO SPURIOUS AMPS AND WATTS BEING REPORTED EVEN WHEN THE POWER TO THE WASHER IS OFF, I'VE SET 
    # IT TO REPORT "Idle" FOR ANYTHING LESS THAN 12W. Values and states based on my washer running a 40
    # degree C wash cycle which is the most common one we run.
    lambda: |-
      if ((id(washing_machine_watts).state >= 12) and (id(washing_machine_watts).state < 35)) {
        return {"Fill / Soak"};
      }
      if ((id(washing_machine_watts).state >= 35) and (id(washing_machine_watts).state < 1500)) {
        return {"Washing"};
      }
      if ((id(washing_machine_watts).state >= 1500) and (id(washing_machine_watts).state < 3500)) {
        return {"Washing & Heating"};
      } else {
        return {"Idle"};
      }
    update_interval: 10s
